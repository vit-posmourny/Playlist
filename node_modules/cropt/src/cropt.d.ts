type RecursivePartial<T> = {
    [P in keyof T]?: RecursivePartial<T[P]>;
};
export interface CroptOptions {
    mouseWheelZoom: "off" | "on" | "ctrl";
    viewport: {
        width: number;
        height: number;
        type: "square" | "circle";
    };
    zoomerInputClass: string;
}
export declare class Cropt {
    #private;
    element: HTMLElement;
    elements: {
        boundary: HTMLDivElement;
        viewport: HTMLDivElement;
        preview: HTMLImageElement;
        overlay: HTMLDivElement;
        zoomerWrap: HTMLDivElement;
        zoomer: HTMLInputElement;
    };
    options: CroptOptions;
    constructor(element: HTMLElement, options: RecursivePartial<CroptOptions>);
    /**
     * Bind an image from an src string.
     * Returns a Promise which resolves when the image has been loaded and state is initialized.
     */
    bind(src: string, zoom?: number | null): Promise<void>;
    /**
     * Returns a Promise resolving to an HTMLCanvasElement object for the cropped image.
     * If size is specified, the image will be scaled with its longest side set to size.
     */
    toCanvas(size?: number | null): Promise<HTMLCanvasElement>;
    toBlob(size?: number | null, type?: string, quality?: number): Promise<Blob>;
    refresh(): void;
    setOptions(options: RecursivePartial<CroptOptions>): void;
    setZoom(value: number): void;
    destroy(): void;
}
export {};
